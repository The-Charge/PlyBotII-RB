// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveXFeet.h"

DriveXFeet::DriveXFeet(float feet) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	FeettoDrive = feet;
}

// Called just before this Command runs the first time
void DriveXFeet::Initialize() {
	Robot::driveTrain->leftFrontEncoder->Reset();
}

// Called repeatedly when this Command is scheduled to run
void DriveXFeet::Execute() {
	Robot::driveTrain->drive(0, .25, 0);
}

// Make this return true when this Command no longer needs to run execute()
bool DriveXFeet::IsFinished() {
	int TICKS = Robot::driveTrain->leftFrontEncoder->Get();
	//Gets the ticks needed to drive 2 ft on the LeftFrontEncoder
	int ticks_needed = Robot::driveTrain->WHEELROTATIONS_PER_FOOT * Robot::driveTrain->ENCODER_TICKS_PER_REVOLUTION * FeettoDrive;

	//Checks if the amount of ticks in at the correct or greater distance wanted
	if (ticks_needed <= TICKS){
		return true;
	}
	return false;
}

// Called once after isFinished returns true
void DriveXFeet::End() {
	Robot::driveTrain->drive(0,0,0); // Stops the Robot when the command is Finished
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveXFeet::Interrupted() {
	Robot::driveTrain->drive(0,0,0); // Stops the Robot when the command is Interrupted
}
